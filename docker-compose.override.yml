version: '3'
services:
  postgres:
    image: 'postgres:latest'
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=bechdel_lists_development
    ports:
      - "${POSTGRES_LOCAL_PORT:-5432}:5432"
  api:
    image: 'bechdel-lists-api'
    volumes:
      - /app/node_modules
      - ./services/api:/app
    command: npm run debug
    environment:
      - NODE_ENV=development
      - SEED_USER_NAME
      - SEED_USER_EMAIL
  client:
    image: 'bechdel-lists-client'
    build:
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./services/client:/app
  nginx:
    image: 'bechdel-lists-nginx'
    build:
      args:
        listen_env: development
    ports:
      - "${NGINX_LOCAL_PORT:-3001}:80"
    volumes:
      - ./services/nginx:/etc/nginx/certs # hack to prevent missing path errors in lieu of a production compose file.
  cypress:
    image: 'cypress'
    build:
      context: ./services/client
      dockerfile: $PWD/services/cypress/Dockerfile
    depends_on:
      - client
      - api
    # environment:
    #   - CYPRESS_baseUrl=http://web
    #command: npx cypress run
    # mount the host directory e2e/cypress and the file e2e/cypress.json as
    # volumes within the container
    # this means that:
    #  1. anything that Cypress writes to these folders (e.g., screenshots,
    #     videos) appears also on the Docker host's filesystem
    #  2. any change that the developer applies to Cypress files on the host
    #     machine immediately takes effect within the e2e container (no docker
    #     rebuild required).
    volumes:
      - ./services/client:/app
      - ./services/client/cypress.json:/app/cypress.json
