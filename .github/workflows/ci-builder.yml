name: ci-builder

on:
  deployment

env:
  DEPLOYMENT: ${{ toJson(github.event.deployment) }}

  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  DOCKER_USERNAME: jbrunton

  CI: 1
  FORCE_COLOR: 1

jobs:

  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.deployment.task == 'build' }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Deployment pending'
        uses: 'deliverybot/status@master'
        with:
          state: 'pending'
          token: '${{ secrets.GITHUB_TOKEN }}'
      
      - name: npm install
        run: npm install

      - name: docker login
        run: echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: 'build'
        run: npx ci create build

      - name: 'commit'
        run: |
          git config --global user.email "jbrunton-ci-minion@outlook.com"
          git config --global user.name "jbrunton-ci-minion"
          
          npx ci commit build
          
          git push origin HEAD:master

      - name: 'notify success'
        if: success()
        uses: 'deliverybot/status@master'
        with:
          state: 'success'
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'notify failure'
        if: failure()
        uses: 'deliverybot/status@master'
        with:
          state: 'failure'
          token: '${{ secrets.GITHUB_TOKEN }}'

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.deployment.task == 'deploy' }}

    env:
      ENVIRONMENT: ${{ github.event.deployment.environment }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Deployment pending'
        uses: 'deliverybot/status@master'
        with:
          state: 'pending'
          token: '${{ secrets.GITHUB_TOKEN }}'
      
      - name: npm install
        run: npm install

      - name: deployment info
        id: deployment_info
        run: npx ci generate deployment-info $ENVIRONMENT

      - name: copy files
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ steps.deployment_info.outputs.host }}
          USERNAME: deployer
          KEY: ${{ secrets.DEPLOYER_SSH_KEY }}
        with:
          source: ${{ steps.deployment_info.outputs.buildFile }}
          overwrite: true
          target: .

      - name: deploy
        uses: appleboy/ssh-action@master
        env:
          HOST: ${{ steps.deployment_info.outputs.host }}
          USERNAME: deployer
          KEY: ${{ secrets.DEPLOYER_SSH_KEY }}
          POSTGRES_CONNECTION: ${{ secrets.POSTGRES_PRODUCTION_CONNECTION }}
          BUILD_FILE: ${{ steps.deployment_info.outputs.buildFile }}
        with:
          script: |
            ln -sf $BUILD_FILE docker-compose.yml
            export POSTGRES_CONNECTION
            docker-compose -f docker-compose.yml up --detach --no-build --remove-orphans
            docker-compose run api npm run db:migrate
          envs: POSTGRES_CONNECTION,BUILD_FILE

      - name: 'commit'
        run: |
          git config --global user.email "jbrunton-ci-minion@outlook.com"
          git config --global user.name "jbrunton-ci-minion"
          
          npx ci commit deployment $ENVIRONMENT
          
          git push origin HEAD:master
  
      - name: 'notify success'
        if: success()
        uses: 'deliverybot/status@master'
        with:
          state: 'success'
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'notify failure'
        if: failure()
        uses: 'deliverybot/status@master'
        with:
          state: 'failure'
          token: '${{ secrets.GITHUB_TOKEN }}'

  update_manifest:
    runs-on: ubuntu-latest
    if: ${{ github.event.deployment.task == 'update_manifest' }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_MINION_ACCESS_TOKEN }}

      - name: npm install
        run: npm install

      - name: Update manifest
        env:
          ENVIRONMENT: ${{ github.event.deployment.payload.environment }}
          VERSION: ${{ github.event.deployment.payload.version }}    
        run: |
          git config --global user.email "jbrunton-ci-minion@outlook.com"
          git config --global user.name "jbrunton-ci-minion"
          
          npx ci update-manifest $VERSION $ENVIRONMENT
          
          git push origin HEAD:master
