name: ci-build

on:
  push:
    branches:
      - master

env:
  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  DOCKER_USERNAME: jbrunton
  FORCE_COLOR: 1
        
jobs:

  build_check:
    runs-on: ubuntu-latest

    outputs:
      buildRequired: ${{ steps.check.outputs.buildRequired }}
      buildId: ${{ steps.check.outputs.buildId }}
      buildVersion: ${{ steps.check.outputs.buildVersion }}
      buildFile: ${{ steps.check.outputs.buildFile }}
      
    steps:
      - uses: actions/checkout@v2

      - name: npm install
        run: npm install

      - name: check manifest
        id: check
        run: |
          export BUILD_ID=$(date +%s)

          npm run ci:build:check -- --next-build-id $BUILD_ID --output-file check.env
          source check.env

          echo "::set-output name=buildRequired::$BUILD_REQUIRED"
          echo "::set-output name=buildId::$BUILD_ID"
          echo "::set-output name=buildVersion::$BUILD_VERSION"
          echo "::set-output name=buildFile::$BUILD_FILE"

  build:
    runs-on: ubuntu-latest
    if: ${{ needs.build_check.outputs.buildRequired == true }}
    needs: build_check

    env:
      BUILD_ID: ${{ needs.build_check.outputs.buildId }}
      BUILD_VERSION: ${{ needs.build_check.outputs.buildVersion }}
      BUILD_FILE: ${{ needs.build_check.outputs.buildFile }}

    steps:
      - uses: actions/checkout@v2

      - name: npm install
        run: npm install

      - name: docker login
        run: echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: build
        run: |
          npm run ci:build -- --build-id $BUILD_ID --build-version $BUILD_VERSION

      - name: commit
        run: |
          git add $BUILD_FILE
          git add deployments/builds/catalog.yml
          git config --global user.email "jbrunton-ci-minion@outlook.com"
          git config --global user.name "jbrunton-ci-minion"
          git commit -m "Generated build for ${BUILD_VERSION} (id: ${BUILD_ID})"
          git push origin HEAD:demo-59-staging
  # deploy:
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.check.outputs.deploymentRequired == true }}
  #   needs: [check, build]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: npm install
  #       run: npm install

  #     - name: Deploy
  #       env:
  #         DEPLOYMENT_FILES: ${{ needs.build.outputs.deploymentFiles }}
  #       run: echo "Running deployment with files $DEPLOYMENT_FILES"

  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Parse tag
  #     run: ./ci/parse_tag.sh

  #   - name: Build the Docker image
  #     run: ./ci/build.sh

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   env:
  #     GITHUB_REF: ${{ github.ref }}
  #     GITHUB_SHA: ${{ github.sha }}

  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Parse tag
  #     run: ./ci/parse_tag.sh

  #   - name: Generate Deployment
  #     run: ./ci/generate_deployment.sh
  
  #   - name: Deploy
  #     uses: appleboy/ssh-action@master
  #     env:
  #       HOST: ${{ secrets.DEPLOY_HOST }}
  #       USERNAME: deployer
  #       KEY: ${{ secrets.DEPLOYER_SSH_KEY }}
  #       POSTGRES_CONNECTION: ${{ secrets.POSTGRES_PRODUCTION_CONNECTION }}
  #     with:
  #       script: |
  #         cd bechdel-demo
  #         git fetch
  #         git checkout $DEPLOYMENT_SHA

  #         export POSTGRES_CONNECTION
  #         export DEPLOYMENT_FILE

  #         ./ci/deploy.sh
  #       envs: POSTGRES_CONNECTION,DEPLOYMENT_SHA,DEPLOYMENT_FILE
